#!/usr/bin/env bb
;; -*- mode: clojure -*-

(require '[babashka.deps :as deps])

(deps/add-deps '{:deps {borkdude/rewrite-edn {:mvn/version "0.0.2"}}})

(require '[babashka.curl :as curl]
         '[babashka.fs :as fs]
         '[borkdude.rewrite-edn :as r]
         '[cheshire.core :as cheshire]
         '[clojure.edn :as edn]
         '[clojure.string :as str])

(defn ensure-deps-edn []
  (when-not (fs/exists? "deps.edn")
    (spit "deps.edn" "{:deps {}}")))

(defn edn-string [] (slurp "deps.edn"))

(defn edn-nodes [edn-string] (r/parse-string edn-string))

(defn parse-opts [opts]
  (into {}
        (for [[arg-name arg-val] (partition 2 opts)]
          [(keyword (subs arg-name 1)) arg-val])))

(def cognitect-test-runner-alias
  "
{:extra-paths [\"test\"]
 :extra-deps {io.github.cognitect-labs/test-runner
               {:git/tag \"v0.5.0\" :git/sha \"b3fd0d2\"}}
 :main-opts [\"-m\" \"cognitect.test-runner\"]
 :exec-fn cognitect.test-runner.api/test}")

(defn indent [s n]
  (let [spaces (apply str (repeat n " "))
        lines (str/split-lines s)]
    (str/join "\n" (map #(str spaces %) lines))))

(defn add-alias [opts alias-kw alias-contents]
  (ensure-deps-edn)
  (let [edn-string (edn-string)
        edn-nodes (edn-nodes edn-string)
        edn (edn/read-string edn-string)
        alias (or (some-> (opts :alias) keyword)
                  alias-kw)
        alias-node (r/parse-string (str "\n " alias " ;; added by neil"))]
    (if-not (get-in edn [:aliases alias])
      (let [s (->> (r/update edn-nodes :aliases
                             (fn [aliases]
                               (let [s (indent alias-contents 1)
                                     alias-nodes (r/parse-string s)]
                                 (r/assoc aliases alias-node alias-nodes))))
                   str
                   str/trim)
            s (str s "\n")]
        (spit "deps.edn" s))
      (println (format "deps.edn already contains %s alias!" alias)))))

(defn add-cognitect-test-runner [opts]
  (add-alias opts :test cognitect-test-runner-alias))

(def kaocha-alias
  "
{:extra-deps {lambdaisland/kaocha {:mvn/version \"1.0.887\"}}}")

(defn add-kaocha [opts]
  (add-alias opts :kaocha kaocha-alias))

(defn build-alias [opts]
  (let [s "
{:deps {io.github.clojure/tools.build {:tag \"v0.5.1\" :sha \"21da7d4\"}{{deps-deploy}}}
 :ns-default build}"]
    (str/replace s "{{deps-deploy}}"
                 (if (:deps-deploy opts)
                   "\n        slipset/deps-deploy {:mvn/version \"0.2.0\"}"
                   ""))))

(defn build-file
  [opts]
  (let [base "(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format \"1.2.%s\" (b/git-count-revs nil)))
(def class-dir \"target/classes\")
(def basis (b/create-basis {:project \"deps.edn\"}))
(def uber-file (format \"target/%s-%s-standalone.jar\" (name lib) version))
(def jar-file (format \"target/%s-%s.jar\" (name lib) version))

(defn clean [_]
  (b/delete {:path \"target\"}))

(defn jar [_]
  (b/write-pom {:class-dir class-dir
                :lib lib
                :version version
                :basis basis
                :src-dirs [\"src\"]})
  (b/copy-dir {:src-dirs [\"src\" \"resources\"]
               :target-dir class-dir})
  (b/jar {:class-dir class-dir
          :jar-file jar-file}))

(defn uber [_]
  (clean nil)
  (b/copy-dir {:src-dirs [\"src\" \"resources\"]
               :target-dir class-dir})
  (b/compile-clj {:basis basis
                  :src-dirs [\"src\"]
                  :class-dir class-dir})
  (b/uber {:class-dir class-dir
           :uber-file uber-file
           :basis basis}))
"]
    (if (:deps-deploy opts)
      (str base
           "
(defn deploy [opts]
  (jar opts)
  ((requiring-resolve 'deps-deploy.deps-deploy/deploy)
    (merge {:installer :remote
                       :artifact jar-file
                       :pom-file (b/pom-path {:lib lib :class-dir class-dir})}
                    opts))
  opts)
")
      base)))

(defn add-build [opts]
  (if-not (fs/exists? "build.clj")
    (spit "build.clj" (build-file opts))
    (println "build.clj already exists!"))
  (ensure-deps-edn)
  (add-alias opts :build (build-alias opts)))

(defn print-help []
  (println (str/trim "
Usage: neil <subcommand>

Subcommands:

add

  - dep: adds :lib (fully qualified symbol) to :deps. Example:

    neil add dep :lib cheshire/cheshire

    Options:

    :lib - fully qualified symbol like cheshire/cheshire
    :version - optional version. When not provided, picks newest version from Clojars.

  - test: adds cognitect test runner to :test alias.

  - build: adds tools.build build.clj file and :build alias.

    Options:

    :deps-deploy true - adds deps-deploy as dependency and deploy task in build.clj

  - kaocha: adds kaocha test runner to :koacha alias.

Override alias names with :alias option:

neil add test :alias test2
")))

(def windows? (str/includes? (System/getProperty "os.name") "Windows"))

(def curl-opts
  {:throw false
   :compressed (not windows?)})

(defn latest-clojars-version [qlib]
  (-> (curl/get (format "https://clojars.org/api/artifacts/%s"
                        qlib)
                curl-opts)
      :body (cheshire/parse-string true)
      :latest_release))

(defn latest-mvn-version [qlib]
  (-> (curl/get (format "https://search.maven.org/solrsearch/select?q=g:%%22%s%%22+AND+a:%%22%s%%22&rows=1"
                        (namespace qlib)
                        (name qlib))
                curl-opts)
      :body (cheshire/parse-string true)
      :response
      :docs
      first
      :latestVersion))

(defn add-lib [opts]
  (ensure-deps-edn)
  (let [edn-string (edn-string)
        edn-nodes (edn-nodes edn-string)
        lib (:lib opts)
        lib (symbol lib)
        version (or (:version opts)
                    (latest-clojars-version lib)
                    (latest-mvn-version lib))
        s (str (r/assoc-in edn-nodes [:deps lib] {:mvn/version version}))
        s (str (str/trim s) "\n")]
    (spit "deps.edn" s)))

(defn add [[subcommand & opts]]
  (let [opts (parse-opts opts)]
    (case subcommand
      "dep" (add-lib opts)
      "test" (add-cognitect-test-runner opts)
      "build" (add-build opts)
      "kaocha" (add-kaocha opts))))

(let [[subcommand & args] *command-line-args*]
  (case subcommand
    "add" (add args)
    ("help" "--help") (print-help)
    (print-help)))
