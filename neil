#!/usr/bin/env bb
;; -*- mode: clojure -*-

(require '[babashka.deps :as deps])

(deps/add-deps '{:deps {borkdude/rewrite-edn {:mvn/version "0.0.2"}}})

(require '[babashka.fs :as fs]
         '[borkdude.rewrite-edn :as r]
         '[clojure.edn :as edn]
         '[clojure.string :as str])

(defn ensure-deps-edn []
  (when-not (fs/exists? "deps.edn")
    (spit "deps.edn" "{}")))

(defn edn-string [] (slurp "deps.edn"))

(defn edn-nodes [edn-string] (r/parse-string edn-string))

(defn parse-opts [opts]
  (into {}
        (for [[arg-name arg-val] (partition 2 opts)]
          [(keyword (subs arg-name 1)) arg-val])))

(def cognitect-test-runner-alias
  "{:extra-paths [\"test\"]
     :extra-deps {io.github.cognitect-labs/test-runner
                {:git/tag \"v0.5.0\" :git/sha \"b3fd0d2\"}}
     :main-opts [\"-m\" \"cognitect.test-runner\"]
     :exec-fn cognitect.test-runner.api/test}")

(defn add-cognitect-test-runner [opts]
  (ensure-deps-edn)
  (let [edn-string (edn-string)
        edn-nodes (edn-nodes edn-string)
        edn (edn/read-string edn-string)
        alias (or (some-> (opts :alias) keyword)
                  :test)
        alias-nodes (r/parse-string cognitect-test-runner-alias)]
    (if-not (get-in edn [:aliases alias])
      (->> (r/assoc-in edn-nodes [:aliases alias]
                       alias-nodes)
           str
           (spit "deps.edn"))
      (println (format "deps.edn already contains %s alias!" alias)))))

(def kaocha-alias
  "{:extra-deps {lambdaisland/kaocha {:mvn/version \"1.0.887\"}}}")

(defn add-kaocha [opts]
  (ensure-deps-edn)
  (let [edn-string (edn-string)
        edn-nodes (edn-nodes edn-string)
        edn (edn/read-string edn-string)
        alias (or (some-> (opts :alias) keyword)
                  :kaocha)
        alias-nodes (r/parse-string kaocha-alias)]
    (if-not (get-in edn [:aliases alias])
      (->> (r/assoc-in edn-nodes [:aliases alias]
                       alias-nodes)
           str
           (spit "deps.edn"))
      (println (format "deps.edn already contains %s alias!" alias)))))

(def build-alias
  "{:deps {io.github.clojure/tools.build {:tag \"v0.5.1\" :sha \"21da7d4\"}}
          :ns-default build}")

(defn build-file
  [opts]
  (let [base "(ns build
  (:require [clojure.tools.build.api :as b]))

(def lib 'my/lib1)
(def version (format \"1.2.%s\" (b/git-count-revs nil)))
(def class-dir \"target/classes\")
(def basis (b/create-basis {:project \"deps.edn\"}))
(def uber-file (format \"target/%s-%s-standalone.jar\" (name lib) version))
(def jar-file (format \"target/%s-%s.jar\" (name lib) version))

(defn clean [_]
  (b/delete {:path \"target\"}))

(defn jar [_]
  (b/write-pom {:class-dir class-dir
                :lib lib
                :version version
                :basis basis
                :src-dirs [\"src\"]})
  (b/copy-dir {:src-dirs [\"src\" \"resources\"]
               :target-dir class-dir})
  (b/jar {:class-dir class-dir
          :jar-file jar-file}))

(defn uber [_]
  (clean nil)
  (b/copy-dir {:src-dirs [\"src\" \"resources\"]
               :target-dir class-dir})
  (b/compile-clj {:basis basis
                  :src-dirs [\"src\"]
                  :class-dir class-dir})
  (b/uber {:class-dir class-dir
           :uber-file uber-file
           :basis basis}))
"]
    (if (:deps-deploy opts)
      (str base
           "
(defn deploy [opts]
  (jar opts)
  ((requiring-resolve 'deps-deploy.deps-deploy/deploy)
    (merge {:installer :remote
                       :artifact jar-file
                       :pom-file (b/pom-path {:lib lib :class-dir class-dir})}
                    opts))
  opts)
")
      base)))

(defn add-build [opts]
  (if-not (fs/exists? "build.clj")
    (spit "build.clj" (build-file opts))
    (println "build.clj already exists!"))
  (ensure-deps-edn)
  (let [edn-string (edn-string)
        edn-nodes (edn-nodes edn-string)
        edn (edn/read-string edn-string)
        alias (or (some-> (opts :alias) keyword)
                  :build)
        alias-nodes (r/parse-string build-alias)]
    (if-not (get-in edn [:aliases alias])
      (let [nodes (r/assoc-in edn-nodes [:aliases alias]
                              alias-nodes)
            nodes (if (:deps-deploy opts)
                    (r/assoc-in nodes [:aliases alias :deps 'slipset/deps-deploy]
                                '{:mvn/version "0.2.0"})
                    nodes)]
        (->>
         nodes
         str
         (spit "deps.edn")))
      (println (format "deps.edn already contains %s alias!" alias)))))

(defn print-help []
  (println (str/trim "
Usage: neil <subcommand>

Subcommands:

add

  - test: adds cognitect test runner to :test alias.

  - build: adds tools.build build.clj file and :build alias.

    Options:

    :deps-deploy true - adds deps-deploy as dependency and deploy task in build.clj

  - kaocha: adds kaocha test runner to :koacha alias.

Override alias names with :alias option:

neil add test :alias test2
")))

(defn add [[subcommand & opts]]
  (let [opts (parse-opts opts)]
    (case subcommand
      "test" (add-cognitect-test-runner opts)
      "build" (add-build opts)
      "kaocha" (add-kaocha opts))))

(let [[subcommand & args] *command-line-args*]
  (case subcommand
    "add" (add args)
    ("help" "--help") (print-help)
    (print-help)))
